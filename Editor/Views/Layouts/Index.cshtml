@using Cosmos.Editor.Data.Logic
@using Microsoft.Extensions.Options;
@inject IEditorSettings options
@{
    ViewData["Title"] = "Website Design Inventory";
    var showFirstPageBtn = (bool)ViewData["ShowFirstPageBtn"];
    var showCreateFirstLayout = (bool)ViewData["ShowCreateFirstLayout"];
}
<div class="pt-3">
    <div class="container">
        @if (showCreateFirstLayout)
        {
            <div class="row justify-content-center">
                <div class="col-md-10 text-light">
                    <h1>Website Design</h1>
                    <p>&quot;Website designs&quot; provide a common functionality, look and feel across all pages on your website.</p>
                    <h4>Choose a pre-built website design (recommended)</h4>
                    <div class="ms-5 mb-5">
                        <p class="mb-3">These designs are ready for use and some are designed for non-technical users.  The is the recommened choice for most users.</p>
                        <a class="btn btn-sm btn-primary" asp-action="CommunityLayouts">Choose pre-built <i class="fa-solid fa-circle-arrow-right"></i></a>
                    </div>
                    <h4>Build your own website design (advanced)</h4>
                    <div class="ms-5 mb-3">
                        <p>If you are working with a web developer with at least basic HTML, CSS and JavaScript experience, you can choose to build a design from scratch that meets your specific needs.</p>
                        <a class="btn btn-small btn-primary" asp-action="Create">Choose custom <i class="fa-solid fa-circle-arrow-right"></i></a>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <h3 class="text-light">@ViewData["Title"]</h3>

                    @if (showFirstPageBtn && showCreateFirstLayout == false)
                    {
                        <a class="btn btn-sm btn-primary" title="Create website home page" href="/Editor/Create">Create Home Page <i class="fa-solid fa-circle-arrow-right"></i></a>
                    }
                </div>
            </div>
            <div class="row cpws-table-pager-row-top">
                <div class="col-md-6">
                    <div class="btn-group" role="group" aria-label="Page Actions">
                        <a class="btn btn-sm btn-primary" href="@Url.Action("Create")">New design</a>
                        <a class="btn btn-sm btn-secondary" title="Export the default layout." href="@Url.Action("ExportLayout")">Export blank</a>
                        <a class="btn btn-sm btn-secondary" title="Export the default layout." href="@Url.Action("ExportLayout")">Export default</a>
                        <a class="btn btn-sm btn-secondary" title="Import one of the community layouts." href="@Url.Action("CommunityLayouts")">Import design <i class="fa-solid fa-circle-arrow-right"></i></a>
                        <a title="Return to page list" class="btn btn-sm btn-secondary" href="@Url.Action("Index", "Editor")">Page list <i class="fa-solid fa-circle-arrow-right"></i></a>
                    </div>
                </div>
                <div class="col-md-6 d-flex justify-content-end">
                   
                </div>
            </div>
            <div class="row bg-dark">
                <div class="col-md-12">
                    <div id="pagelist-table" class="table-dark"></div>
                    <script>

                        const publisherUrl = "@options.PublisherUrl.TrimEnd('/')";
                        const tblHeight = window.innerHeight - 200;
                        let pageSize = Math.round(tblHeight / 50) + 1;

                        function dateTime(cell, formatterParams, onRendered){
                            //cell - the cell component
                            //formatterParams - parameters set for the column
                            //onRendered - function to call when the formatter has been rendered
                            return getLocalTime(cell.getValue());
                        }

                        function dateFilterFunction(headerValue, rowValue, rowData, filterParams){
                            if (rowValue === null || rowValue === "") {
                                return false;
                            }
                            return headerValue === rowValue.split("T")[0]; //must return a boolean, true if it passes the filter.
                        }

                        const menuBar = function(cell, formatterParams){
                            data = cell.getRow().getData();
                            let html = "<div class='btn-group btn-group-sm' role='group' aria-label='Page actions.'>";
                            
                            // let url = data.UrlPath;
                            // if (url === "root") {
                            //     url = "";
                            // }

                            // if (data.IsDefault === true){
                            //     html += "<div title='Current home page.' class='btn btn-sm btn-primary'><i class='fa-solid fa-house'></i></div>";
                            // }
                            // else if (data.LastPublished !== null && data.LastPublished !== ""){
                            //     html += "<a href='/Editor/NewHome/" + data.ArticleNumber + "' title='Make this the new home page.' class='btn btn-sm btn-secondary'><i class='fa-solid fa-house'></i></a>";
                            // }
                            // else
                            // {
                            //     html += "<a title='Cannot make this the new home page until it is published.' onclick='alert(\"Cannot make this the home until it is published.\")' class='btn btn-sm btn-secondary'><i class='fa-solid fa-house'></i></a>";
                            // }

                            // html += "<a class='btn btn-sm btn-secondary' title='Create a clone of this page' href='/Editor/Clone/" + data.ArticleNumber + "'><i class='fa-solid fa-copy'></i></a>";

                            // if (data.LastPublished !== null && canEdit && data.IsDefault === false)
                            // {
                            //     html += "<button onclick='unpublish(" + data.ArticleNumber + ")' title='Unpublishes a this item, and makes it no longer accessible except for editing.' class='btn btn-sm btn-secondary'><i class='fa-solid fa-calendar-xmark'></i></button>";
                            // }
                            
                            html += "</div>";


                            return html;
                        };

                        const pageTable = new Tabulator("#pagelist-table", {
                            height:tblHeight + "px",
                            pagination:true, //enable pagination
                            paginationMode:"local", //enable local pagination
                            paginationSize:pageSize, //optional parameter to request a certain number of rows per page
                            persistence:{
                                sort: true, //persist column sorting
                                filter: true, //persist filters
                                headerFilter: true, //persist header filters
                                group: false, //persist row grouping
                                page: true, //persist page
                                columns: false, //persist columns
                            },
                            persistenceWriterFunc:function(id, type, data){
                                //id - tables persistence id
                                //type - type of data being persisted ("sort", "filter", "group", "page" or "columns")
                                //data - array or object of data
                                sessionStorage.setItem(id + "-" + type, JSON.stringify(data));
                            },
                            persistenceReaderFunc:function(id, type){
                                //id - tables persistence id
                                //type - type of data being persisted ("sort", "filter", "group", "page" or "columns")
                                var data = sessionStorage.getItem(id + "-" + type);
                                return data ? JSON.parse(data) : false;
                            },
                            layout:"fitColumns",
                            ajaxURL:"@Url.Action("GetArticleList", "Editor")?publishedOnly=false", //ajax URL
                            columns:[
                                    {title:"Id", field:"Id", visible: false },

                                    {title:"Actions", field:"IsDefault", formatter:menuBar, width:176, headerSort:false },

                                    {title:"Version", field:"Version" },
                                    {title:"Name", field:"LayoutName", sorter:"string", headerFilter:"input" },

                                    {title:"Modified",
                                        field:"LastModified",
                                        headerFilter:"date",
                                        headerFilterFunc:dateFilterFunction,
                                        cellClick:openArticleVersions,
                                        width:180,
                                        sorter:"datetime",
                                        sorterParams:{
                                            format:"iso" },
                                        formatter:"datetime",
                                        formatterParams:{
                                            inputFormat:"iso",
                                            outputFormat:"MM/dd/yyyy HH:mm:ss",
                                            invalidPlaceholder:"(Invalid date)"
                                        }
                                    },

                                    {title:"Published",
                                        field:"Published",
                                        headerFilter:"date",
                                        headerFilterFunc:dateFilterFunction,
                                        cellClick:openArticleVersions,
                                        width:180,
                                        sorter:"datetime",
                                        sorterParams:{
                                            format:"iso" },
                                        formatter:"datetime",
                                        formatterParams:{
                                            inputFormat:"iso",
                                            outputFormat:"MM/dd/yyyy HH:mm:ss",
                                            invalidPlaceholder:"(Invalid date)"
                                        }
                                    },
                                ],
                            });

                    </script>
                </div>
            </div>
            <div class="row cpws-table-pager-row-bottom">
                <div class="col-md-12 d-flex justify-content-center">
                    
                </div>
            </div>
        }
    </div>
</div>

<form>
    <input id="selected" type="hidden" />
</form>

<script>
    $(document).ready(function () {

        $("body").addClass("cwps-editor-container");

    });
</script>
