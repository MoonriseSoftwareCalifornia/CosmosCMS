@using Cosmos.Cms.Common.Services.Configurations
@using Sky.Editor.Data.Logic
@using Microsoft.Extensions.Options
@model ArticleViewModel
@inject IEditorSettings options
@{
    ViewData["Title"] = "Publish Website";
}
<div class="cwps-editor-container pt-3">
    <div class="container pt-2">
        <div class="row">
            <div class="col text-light">
                <h3>Publish Website</h3>
                <hr />
                <p>
                    Clicking the button below does two things:
                </p>
                <ul>
                    <li>If static web pages are enabled, publishes a fresh copy of all of them.</li>
                    <li>If a CDN is configured, refreshes the Content Delivery Network (CDN) cache.</li>
                </ul>
                <p>Please note: Publishing can take several minutes to complete.</p>
                <br />
                <button id="btnPublish" class="btn btn-sm btn-success" onclick="publish()">Publish Website</button>
                <div id="statusMsg" class="mt-4">
                </div>

                <div style="padding-bottom: 30px; padding-top: 30px;">
                    <p>
                        <span class="badge badge-warning">WARNING: </span>
                        When publishing, websites with large amounts of content may experience temporary performance degradation
                        as caching mechanisms reload content.
                    </p>
                </div>
                <div class="row" id="msgBox">
                    <div class="card-group" style="padding-top: 30px;">
                        <div id="card1" class="card text-white bg-primary mb-4" style="display:none">
                            <div class="card-header" id="card1header">
                                <h6 class="card-title">Date/Time Stamps</h6>
                            </div>
                            <div class="card-body" id="card1body">
                                <div>
                                    Updaing the &quot;last changed&quot; date and time of when each web page is the primary way caching mechanisms know that a page is updated.
                                </div>
                                <div id="spinner1" style="display: none">
                                </div>
                            </div>
                        </div>
                        <div id="card3" class="card text-white bg-primary mb-4" style="display:none">
                            <div class="card-header" id="card3header">
                                <h6 class="card-title">CDN</h6>
                            </div>
                            <div class="card-body" id="card3body">
                                <div>
                                    C/CMS can integrate with Content Delivery Networks (CDN) to speed up delivery of web content to users.
                                </div>
                                <div id="spinner3" style="display: none">
                                    Working...
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="purgeDetails"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    let counter;
    let count = 61;
    let second = 1;
    let publishedPages = [];
    const staticWebsite = @options.StaticWebPages.ToString().ToLower();

    $("#btnStartCountDown").click(function(e) {
        e.preventDefault();
        $("#clearDiv").hide();
        $("#gaugeDiv").show();
        $("#resultDiv").hide();
        counter = setInterval(timer, 200); //1000 will  run it every 1 second
    });

    function change(e) {
        $("#gauge").data("kendoRadialGauge").value($("#gauge-value").val());
    }

    async function publish(e) {

        $("#statusMsg").html("Getting list of web pages to publish...");

        const response1 = await fetch('@Url.Action("GetPublishedPageList")');
        const pageList = await response1.json();

        $("#card1header").attr("class", "card-header text-white bg-primary");
        $("#btnPublish").hide();

        //e.preventDefault();
        //$("#msgBox").html("<p>Working, please wait .... </p><ul><li>Beginning publishing process...</li></ul>");
        $("#statusMsg").html("<p>Updating time stamps on " + pageList.length + " published pages. Please wait, this may take a while ...</p>");

        // Start with updating the time stamps of all published articles
        //const response2 = await fetch('@Url.Action("UpdateTimeStamps")');
        //const result2 = response2.json(); // await response.

        // Now handle static web pages.
        if (staticWebsite) {
            $("#statusMsg").html("<p>Publishing " + pageList.length + " static pages, please wait, this may take a while ...</p>");
            let idlist = [];
            let c = 0;
            for (let i = 0; i < pageList.length; i++) {

                idlist.push(pageList[i].Id);
                c++;

                if (c === 10) {
                    const response = await fetch('@Url.Action("PublishStaticPages")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(idlist)
                    });
                    const result = await response.json();
                    $("#statusMsg").html("<p>Published " + (i + 1) + " out of " + pageList.length + "static pages. Working ...</p>");
                    c = 0;
                    idlist = [];
                }
            }

            // Finish up any remainder.
            if (idlist.length > 0) {
                await fetch('@Url.Action("PublishStaticPages")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(idlist)
                    });
            }


            $("#statusMsg").html("Regenerating the TOC and site map ...");
            const response2b = await fetch('@Url.Action("PublishTOC")');

            $("#statusMsg").html("<p>Done with static pages.</p>.");
        }

        // Now handle CDN
        $("#statusMsg").html("Refreshing CDN (if configured)...");

        const response3 = await fetch('@Url.Action("RefreshCdn")');
        const result3 = response3.json(); // await response.

        $("#statusMsg").html("Done.");
        $("#btnPublish").show();
    }


</script>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}