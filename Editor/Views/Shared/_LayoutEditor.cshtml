@using System.Reflection
@using Cosmos.Cms.Common.Services.Configurations;
@using Sky.Editor.Data.Logic
@using Microsoft.Extensions.Options;
@inject IEditorSettings options
@{
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
    var assemblyVersion = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
    var isAuthor = User.IsInRole("Authors");
    var title = ViewData["PageTitle"];
    var requiresAuth = options.CosmosRequiresAuthentication;
    var isDesigner = (bool?)ViewData["IsDesigner"];
    var controllerName = ViewContext.RouteData.Values["controller"].ToString();
    var actionName = ViewContext.RouteData.Values["action"].ToString();
    var lastPublishedDateTimeOffset = (DateTimeOffset?)ViewData["LastPubDateTime"];
    var lastPublishedString = lastPublishedDateTimeOffset.HasValue ? "'" + lastPublishedDateTimeOffset.Value.ToString("u") + "'" : string.Empty;
    var editorPath = Context.Request.Path;
    var readOnly = (bool?)ViewData["ReadOnly"] ?? false;
}
<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" type="text/css" href="~/lib/bootstrap/css/bootstrap.min.css">

    <link rel="stylesheet" type="text/css" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="~/lib/jquery-ui-combobox/jquery-ui-combobox.css" />

    <link rel="stylesheet" type="text/css" href="~/lib/font-awesome/css/all.min.css">
    <link rel="stylesheet" type="text/css" href="~/css/2024-01-20-01-site.css" />
    <link rel="stylesheet" type="text/css" href="~/css/CodeEditor.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.css" />

    <script src="~/lib/promise-window/promise-window.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>
    <script src="~/lib/jquery-ui-combobox/jquery-ui-combobox.js"></script>
    <script src="~/lib/cosmos/jquery.blockui.js"></script>
    <script src="~/ccms/js/TimeUtils.js"></script>

    <script>
        let cosmos_plugin_array = [];
        const isAuthor = @isAuthor.ToString().ToLower();
        const isReviewer = @User.IsInRole("Reviewers").ToString().ToLower();
    </script>

    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>


    @Html.Raw(JavaScriptSnippet.FullScript)
</head>
<body class="cwps-body" style="margin:0px;padding:0px;">
    <nav id="ccmsNavMenu" class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <img src="~/images/skycms/SkyCMSLogoDarkTransparent.png" height="30" />
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            @if (readOnly)
            {
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><div class="btn btn-sm btn-secondary mt-1">Read-only Mode</div></li>
                    </ul>
                </div>
            }
            else
            {
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" id="btnSave" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Menu
                            </a>
                            <ul class="dropdown-menu dropdown-menu-dark" id="ddSave">
                                <li id="btnOtherPages" style="display:none">
                                    <a class="dropdown-item" title="Open another web page." onclick="bgEditClick('Pages')" href="#">Pages</a>
                                </li>
                                <li id="btnSaveChanges">
                                    <a class="dropdown-item" title="Update this page." onclick="bgEditClick('Save')" href="#">Save</a>
                                </li>
                                <li id="btnSaveAsDraft">
                                    <a class="dropdown-item" title="Save as a new unpublished draft." onclick="bgEditClick('Draft')" href="#">Save draft</a>
                                </li>
                                <li id="btnSaveAndPublish" style="display:none;">
                                    <a class="dropdown-item" title="Publish now if new, or republish using previous date and time." onclick="bgEditClick('Publish')" href="#">Publish now</a>
                                </li>
                                <li>
                                    <a class="dropdown-item" onclick="bgEditClick('Close')">Close</a>
                                </li>
                                <li class="perm"><hr class="dropdown-divider"></li>
                                <li class="perm" id="btnPermissions">
                                    <a title='Set which users and roles can access this page.' class="dropdown-item" onclick="bgEditClick('permissions')">Permissions</a>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li id="btnFiles">
                                    <a class="dropdown-item" title="Files that are uploaded to this page." onclick="bgEditClick('Files')">Files (this page)</a>
                                </li>
                                <li>
                                    <a class="dropdown-item" title="Files that are uploaded to this page." onclick="bgEditClick('filemgr')">Files (all files)</a>
                                </li>
                                <li id="btnSourceCode" style="display:none">
                                    <a class="dropdown-item" href="/Code/Index" title="Internal (non-public) file storage." target="_blank">Internal files</a>
                                </li>
                                @if (isAuthor == false)
                                {
                                    <li id="btnCcmsCodeEditor" style="display:none">
                                        <a class="dropdown-item" onclick="bgEditClick('Code')">Code editor</a>
                                    </li>
                                }
                                <li id="btnCcmsHtmlEditor" style="display:none">
                                    <a class="dropdown-item" onclick="bgEditClick('Html')">HTML editor</a>
                                </li>
                                <li id="btnCcmsGrapesJsEditor" style="display:none">
                                    <a class="dropdown-item" onclick="bgEditClick('Designer')">Design editor</a>
                                </li>
                                <li id="liBtnVersions" style="display:none">
                                    <a id="btnVersions" class="dropdown-item" href="#" target="_blank">Page versions</a>
                                </li>
                                <li>
                                    <a class="dropdown-item" title="Open public (publisher) website" href="@options.PublisherUrl" target="_blank">Public Website</a>
                                </li>
                                <li>
                                    <a class="dropdown-item" title="Open Cosmos documentation" href="https://docs.cosmosws.io/" target="_blank">Documentation</a>
                                </li>
                                <li>
                                    <span title="Cosmos Version" class="dropdown-item text-mute">@assemblyVersion.ToString()</span>
                                </li>
                            </ul>
                        </li>

                        <li id="liInsert" class="nav-item dropdown" style="display:none">
                            <a class="nav-link dropdown-toggle" id="btnInsert" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Insert
                            </a>
                            <ul class="dropdown-menu dropdown-menu-dark" id="ddInsert">
                                <li class="nav-item">
                                    <button id="btnOpenLink" class="dropdown-item" type="button">Page Link</button>
                                </li>
                                <li class="nav-item">
                                    <button id="btnOpenInsertFileLink" class="dropdown-item" type="button">File Link</button>
                                </li>
                                <li class="nav-item">
                                    <button id="btnOpenInsertImage" class="dropdown-item" type="button">Image</button>
                                </li>
                            </ul>
                        </li>

                        <li class="nav-item">
                            <div class="btn-group" role="group" aria-label="Preview image button group">
                                <button id="btnOpenBannerImage" class="btn btn-sm btn-secondary mt-1" title="Sets the preview image for this page." type="button"><i class="fa-regular fa-image"></i></button>
                                <button id="btnClearBannerImage" class="btn btn-sm btn-secondary mt-1" title="Remove the preview image for this page." type="button"><i class="fa-solid fa-xmark"></i></button>
                            </div>
                        </li>

                        <li class="nav-item" id="divAutoSave" style="display:none">
                            <div class="form-check form-switch">
                                <input id="swAutoSave" class="form-check-input" type="checkbox" role="checkbox" checked>
                                <label id="lblAutoSave" style="font-size:0.8rem" class="form-check-label text-light" for="swAutoSave">Autosave (on)</label>
                            </div>
                        </li>

                        <li class="nav-item" id="msgSaving">
                            <div id="btnSavingStatus" class="btn btn-sm btn-secondary mt-1 ms-1 me-1" style="display:none">
                                <div id="spSaving" class="spinner-border spinner-border-sm text-light" role="status" style="display:none"></div>
                                <span id="btnSavingText">Saved</span>
                            </div>
                        </li>

                        <li class="nav-item">
                            <div id="msgSpecial" style="display:none"></div>
                            &nbsp;
                            <div id="spinLoading" class="btn btn-sm btn-primary mt-1">
                                <div class="align-items-center text-light">
                                    <strong>Loading...</strong>
                                    <div class="spinner-border spinner-border-sm text-light" role="status"></div>
                                </div>
                            </div>
                        </li>
                        <li class="nav-item">
                            <div class=" mt-1 me-2">
                                <a title='Set which users and roles can access this page.' id="btnArticleAccess"
                                   class='btn btn-sm perm' href="javascript:bgEditClick('permissions')"><i class="fa-solid fa-users"></i></a>
                            </div>
                        </li>

                        <li class="nav-item">
                            <div class="btn-group" role="group" aria-label="Preview image button group">
                                <a class="btn btn-sm btn-secondary mt-1" onclick="bgEditClick('Preview')">Preview/Publish</a>
                            </div>
                        </li>

                        <li class="nav-item">
                            <div id="divLastPublished" title="Last published date and time." style="font-size:0.45rem;display:none"
                                 class="btn btn-sm btn-secondary mt-1 ms-1 me-1">
                                Last published:<br />
                                <span id="lblLastPublished"></span>
                            </div>
                        </li>
                        <li class="nav-item">
                            <div id="divTitleGroup" class="input-group input-group-sm mt-1 text-truncate" style="display:none">
                                <span class="input-group-text" id="lblTitle" style="height:31px;">Title: </span>
                                <div title="@title" class="form-control d-inline-block text-truncate" id="divTitle" style="max-width: 300px;">@title</div>
                            </div>
                        </li>
                        <li class="nav-item">
                            <div id="cdnMsg" title="This is an estimate of when changes will appear on the web based on the CDN in use." class=" mt-1 ms-1 me-1 text-light">
                            </div>
                        </li>
                    </ul>
                </div>
            }
        </div>
    </nav>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js" integrity="sha512-a+SUDuwNzXDvz4XrIcXHuCf089/iJAoN4lmrXJg18XnduKK6YlDHNRalv4yd1N40OKI80tFidF+rqTFKGPoWFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script asp-append-version="true" src="~/lib/cosmos/crypto-js/cryptpo-js-encrypt.js"></script>
    <!-- Full screen modal -->
    <script>
        // Must have global scope so using var
        var requiresAuthentication = @requiresAuth.ToString().ToLower();
    </script>

    @RenderBody()

    <div id="modals">
        <div class="modal fade" id="modalRecoverData" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Recover changes?</h5>
                    </div>
                    <div class="modal-body">
                        <p>A recent save for this page did not succeed, but the changes were saved locally.</p>
                        <p>Do you want to recover saved changes?</p>
                    </div>
                    <div class="modal-footer">
                        <button id="modalBtnSaveFirst" type="button" class="btn btn-secondary" onclick="restoreBackup()" data-bs-dismiss="modal">Yes</button>
                        <button type="button" class="btn btn-secondary" onclick="deleteBackup()" data-bs-dismiss="modal">No</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalCheckSaveFirst" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Save First?</h5>
                    </div>
                    <div class="modal-body">
                        <div id="divSaveFirstDialog"></div>
                    </div>
                    <div class="modal-footer">
                        <button id="modalBtnSaveFirst" type="button" class="btn btn-secondary" onclick="saveChanges()" data-bs-dismiss="modal">Yes</button>
                        <button type="button" class="btn btn-secondary" onclick="doNotSave()" data-bs-dismiss="modal">No</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalCheckPermissions" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">No Permissions Set</h5>
                    </div>
                    <div class="modal-body">
                        <p>ALERT: Permissions are required prior to publishing a page.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="bgEditClick('permissions')" data-bs-dismiss="modal">Set Permissions</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalChangeTitle" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content bg-dark text-light">
                    <div class="modal-header">
                        <h5 id="modalChgTitleHeader" class="modal-title">Change URL</h5>
                    </div>
                    <div class="modal-body">
                        <form id="frmChangeTitle">
                            <div class="form-group">
                                <label id="lblCurrentTitle" for="currentTitle" title="Showing current URL" class="control-label">Current URL:</label>
                                <div class="form-control" id="currentTitle"></div>
                            </div>
                            <div class="form-group">
                                <label id="lblNewTitle" for="newTitle" class="control-label">New URL: /</label>
                                <input class="form-control" autocomplete="off" required id="newTitle" title="Enter new URL" />
                                <span id="newTitleValidation" class="btn btn-sm btn-danger" style="display:none"></span>
                            </div>
                            <div id="divUrlTitleExamples" style="display:none">
                                <p>Example URLs:</p>
                                <label id="lblCurrentTitle" for="currentTitle" class="control-label">Example URL:</label>
                                <div class="form-control" id="currentTitle">Water</div>
                                <label id="lblCurrentTitle" for="currentTitle" class="control-label">Example URL with a parent page:</label>
                                <div class="form-control" id="currentTitle">Water/Images</div>
                                <label id="lblCurrentTitle" for="currentTitle" class="control-label">Example URL with two parent pages:</label>
                                <div class="form-control" id="currentTitle">Water/Images/Mountain Tops</div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-secondary">Change and Save</button>
                                <button id="btnCancelChgTitle" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalSavingError" tabindex="-1">
            <div class="modal-dialog bg-dark">
                <div class="modal-header">
                    <h5 class="modal-title text-light">Error Detected</h5>
                </div>
                <div class="modal-body text-light">
                    <div id="divErrorLog" class="text-light"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
        <div class="modal fade" id="pickPageModal" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content bg-dark text-white">
                    <div class="modal-header">
                        <h4 class="text-light">
                            Insert Page Link
                        </h4>
                    </div>
                    <div class="modal-body">
                        <div class="container-fluid">
                            <div class="row mb-3">
                                <label for="combobox">Page search:</label>
                                <div class="row">
                                    <div class="col-9">
                                        <input id="combobox" autocomplete="off" laceholder="Search for a page ..." type="text" class="form-control bg-dark text-light custom-combobox" aria-label="Type to search for a page." style="height:26px">
                                    </div>
                                    <div class="col-3">
                                        <button type="button" id="btnRefreshList" title="Refresh search" class="btn btn-sm btn-secondary">Refresh <i class="fa-solid fa-rotate"></i></button>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3" id="pageSelectResults">
                                <div class="col-9">
                                    <div id="pageStatus" class="text-light" style="display:none;font-size:0.8rem;">
                                    </div>
                                </div>
                                <div class="col-3">
                                    <a id="btnOpenLink" href="#" target="_blank" class="btn btn-sm btn-secondary" style="display:none">Versions <i class="fa-solid fa-circle-arrow-right"></i></a>
                                </div>
                            </div>
                            <div id="divLinkDetails" style="display:none">
                                <div class="row mb-3">
                                    <label for="inputLinkText" class="form-label">Link text:</label>
                                    <input id="inputLinkText" type="text" class="form-control form-control-sm">
                                    <span id="inputLinkTextError" class="badge badge-danger" style="display:none">Link text is required.</span>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="modal-fooder">
                        <div class="container-fluid">
                            <div class="row mb-3">
                                <div class="col-auto ms-5">
                                    <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button id="btnApplyLink" type="button" class="btn btn-sm btn-primary" disabled>Apply <i class="fa-solid fa-circle-arrow-right"></i></button>
                                    <a id="btnCreatePage" target="_blank" href="" class="btn btn-sm btn-primary" style="display:none">Create page <i class="fa-solid fa-circle-arrow-right"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalSelectFile" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content bg-dark text-white">
                    <div class="modal-body" style="height: 100vh;position:relative;">
                        <div style="height:100%;width:100%;">
                            <button id="btnSelectFileAndClose" type="button" class="btn btn-sm btn-success" data-bs-dismiss="modal" disabled>Select and Close</button>
                            <button type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Cancel</button>
                            <button id="btnClear" type="button" class="btn btn-sm btn-primary" title="Clear list of selected items" style="display:none">Clear Selected</button>
                            <div id="spinFileMgrLoading" class="btn btn-sm btn-primary mt-1 ms-3 me-3">
                                <div class="align-items-center text-light">
                                    <strong>Loading...</strong>
                                    <div class="spinner-border spinner-border-sm text-light" role="status"></div>
                                </div>
                            </div>
                        </div>
                        <iframe id="iframeSelectFile" class="m-fileselector-container" style="height: 100%; width: 100%;"></iframe>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalFileMgr" tabindex="-3">
            <div class="modal-dialog modal-fullscreen">
                <div id="fileMgrModalContent" class="modal-content">
                    <div class="modal-header bg-dark text-light">
                        <button type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Close File Manager</button>
                    </div>
                    <div class="modal-body">
                        <iframe id="iframeFileMgr" class="d-block w-100" style="height:100%"></iframe>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalPermMgr" tabindex="-4">
            <div class="modal-dialog modal-fullscreen">
                <div id="permMgrModalContent" class="modal-content">
                    <div class="modal-header bg-dark text-light">
                        <button type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Close Permissions Manager</button>
                    </div>
                    <div class="modal-body">
                        <iframe id="iframePermMgr" class="d-block w-100" style="height:100%"></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>

        const isReadOnly = @readOnly.ToString().ToLower();
        const isDesigner = @((isDesigner.HasValue ? isDesigner : false).ToString().ToLower());
        const modalRecoverData = new bootstrap.Modal(document.getElementById('modalRecoverData'));
        const modalChangeTitle = new bootstrap.Modal(document.getElementById('modalChangeTitle'));
        const modalCheckSaveFirst = new bootstrap.Modal(document.getElementById('modalCheckSaveFirst'));
        const pickPageModal = new bootstrap.Modal(document.getElementById('pickPageModal'));
        const modalSelectFile = new bootstrap.Modal(document.getElementById('modalSelectFile'));
        const modalFileMgr = new bootstrap.Modal(document.getElementById('modalFileMgr'));
        const modalPermMgr = new bootstrap.Modal(document.getElementById('modalPermMgr'));
        const modalCheckPermissions = new bootstrap.Modal(document.getElementById('modalCheckPermissions'));
        const fileBaseUrl = "@(options.BlobPublicUrl.TrimEnd('/'))";
        const errorModal = new bootstrap.Modal(document.getElementById('modalSavingError'));
        document.getElementById('modalFileMgr').addEventListener('hidden.bs.modal', event => {
            if (isDesigner) {
                cosmos__designerLoadAssets("/pub", "pub/articles");
            }
        });

        // Indicates a save is in progress - used to deconflict simultaneous saves
        let saveInProgress = false;

        // VARIABLES
        // Function to fire after modal action
        var next;
        let comboBoxTimeout = null;
        let fileMgrPopup = null;
        let selectedFile = "";
        let lastPublished = new Date(@Html.Raw(lastPublishedString));
        let autoSaveSwLastStatus;
        // Sometimes auto save switch is on, but something is going on
        // where auto save should not save. Example:right in the middle of
        // changing the "title".
        // When set to true, autosave works. False means it is temporarily overridden and off.
        let autoSaveOn = (isReadOnly === false);
        // Is this an article model?
        // If so check to see if title/url can change (not home page)
        // and if the title needs to be checked prior to save.
        let isArticle = @((Model != null && (Model.GetType() == typeof(EditCodePostModel) || Model.GetType() == typeof(HtmlEditorViewModel))).ToString().ToLower());
        // Selected anchor data
        let selectedAnchorData;
        var selectFileMode;

        function setupIframes(iframeId, contentId) {
            var iframe = $(iframeId);
            $(contentId).height = 50 + (window.innerHeight - document.getElementById("ccmsNavMenu").clientHeight);
        }

        $("#iframeFileMgr").on("load", setupIframes("#iframeFileMgr", "#fileMgrModalContent"));

        $("#iframePermMgr").on("load", setupIframes("#iframePermMgr", "#permMgrModalContent"));

        function openSelectFileModal(mode) {

            selectFileMode = mode;

            let id = $("#ArticleNumber").val();
            let url = "@Url.Action("Index", "FileManager")";

            if (typeof (id) !== "undefined" && id !== null & id !== "") {
                url += "?target=pub/articles/" + id;
            } else {
                url += "?target=";
            }

            if (mode === "image" || mode === "bannerimage") {
                url += "&imagesOnly=true";
            }

            url += "&selectOne=true&isNewSession=true&";

            $('#iframeSelectFile').attr('src', url);

            modalSelectFile.show();

        }

        function getAutoSave() {
            return $("#swAutoSave").is(":checked") && autoSaveOn;
        }

        function showSaving() {
            $("#spSaving").show();
            $("#btnSavingStatus").removeClass("btn-secondary");
            $("#btnSavingStatus").addClass("btn-primary");
            $("#btnSavingText").html("Saving...");
        }

        function showSaved() {
            $("#spSaving").hide();
            $("#btnSavingStatus").removeClass("btn-primary");
            $("#btnSavingStatus").addClass("btn-success");
            setTimeout(function () {
                $("#btnSavingStatus").removeClass("btn-success");
                $("#btnSavingStatus").addClass("btn-secondary");
            }, 1500);
            $("#btnSavingText").html("Saved");
        }

        function getDirectoryName(path) {
            if (!path) return '';
            const lastSlashIndex = path.lastIndexOf('/');
            if (lastSlashIndex === -1) return '';
            return path.substring(0, lastSlashIndex);
        }

        function bgEditClick(command) {
            var articleNumber = $("#ArticleNumber").val();
            var itemPath = getDirectoryName($("#Path").val());
            var itemId = $("#Id").val();
            switch (command) {
                case "Code":
                    next = function () {
                        if ("@controllerName" == "Editor") {
                            window.location.href = "/@controllerName/EditCode/" + articleNumber;
                        } else {
                            window.location.href = "/@controllerName/EditCode/" + itemId;
                        }
                    }
                    $("#divSaveFirstDialog").html("Save before opening code editor?");
                    modalCheckSaveFirst.show();
                    break;
                case "Designer":
                    next = function () {
                        if ("@controllerName" == "Editor") {
                            window.location.href = "/Editor/Designer/" + articleNumber;
                        } else {
                            window.location.href = "/@controllerName/Designer/" + itemId;
                        }
                    }
                    $("#divSaveFirstDialog").html("Save before opening code editor?");
                    modalCheckSaveFirst.show();
                    break;
                case "Html":
                    next = function () {
                        if ("@controllerName" == "Editor") {
                            window.location.href = "/Editor/Edit/" + articleNumber;
                        } else {
                            window.location.href = "/@controllerName/Edit/" + itemId;
                        }
                    }
                    $("#divSaveFirstDialog").html("Save before opening HTML editor?");
                    modalCheckSaveFirst.show();
                    break;
                case "Preview":
                    next = function () {
                        if ("@controllerName" == "Editor") {
                            window.location.href = "/Home/Index?articleId=" + $("#Id").val() + "&previewType=article&editorUrl=@editorPath";
                        } else {
                            window.location.href = "/@controllerName/Preview/" + itemId;
                        }
                    }
                    saveChanges();
                    break;
                case "Layouts":
                    window.location.href = "/Layouts/Index/" + itemId;
                    break;
                case "Pages":
                    // Note: 'next' is defined in _LayoutEditor.cshtml.
                    next = function () {
                        window.location.href = "/Editor/Index";
                    }
                    $("#divSaveFirstDialog").html("Save page before closing editor?");
                    modalCheckSaveFirst.show();
                    break;
                case "Close":
                    next = function () {
                        switch("@controllerName") {
                            case "Code":
                                window.location.href = "/Code/Source?target=" + itemPath;
                                break;
                            case "Editor":
                                window.location.href = "/Editor/Versions/" + articleNumber;
                                break;
                            case "FileManager":
                                window.location.href = "/FileManager/Index?target=" + itemPath;
                                break;
                            default:
                                window.location.href = "/@controllerName/Index";
                                break;
                        }
                    }
                    $("#divSaveFirstDialog").html("Save page before closing editor?");
                    modalCheckSaveFirst.show();
                    break;
                case "Draft":
                    //$("#tbPublished").val("");
                    $("#btnPublishNow").show();
                    $("#btnDraftNow").hide();
                    //$("#tbPublished").addClass("is-invalid");
                    $("#Published").val("");
                    $("#SaveAsNewVersion").val("true");
                    $("#frmSave").submit();
                    break;
                case "Save":
                    $("#SaveAsNewVersion").val("false");
                    $("#frmSave").submit();
                    break;
                case "Files":
                    var id = $("#ArticleNumber").val();
                    var url = "@Url.Action("Index", "FileManager")";
                    if (typeof (id) !== "undefined" && id !== null & id !== "") {
                        url += "?target=pub/articles/" + id;
                    }
                    $("#iframeFileMgr").prop("src", url);
                    modalFileMgr.show();
                    modalFileMgr.handleUpdate();
                    break;
                case "permissions":
                    var id = $("#ArticleNumber").val();
                    var url = "@Url.Action("Permissions", "Editor")";
                    if (typeof (id) !== "undefined" && id !== null & id !== "") {
                        url += "/" + id;
                        $("#iframePermMgr").prop("src", url);
                        modalPermMgr.show();
                        modalPermMgr.handleUpdate();
                    }
                    break;
                case "filemgr":
                    // Note: 'next' is defined in _LayoutEditor.cshtml.
                    next = function () {
                        window.location.href = "@Url.Action("Index", "FileManager")";
                    }
                    $("#divSaveFirstDialog").html("Save page before closing editor?");
                    modalCheckSaveFirst.show();
                    break;
                default:
                    // Executes functions specific to this editor
                    bgEditClickCustom(command);
                    break;
            }
        }

        function doNotSave() {
            modalCheckSaveFirst.hide();
            next();
        }

        function getLocalTimeZone() {
            const datetime = new Date();
            const dateTimeString = datetime.toString();
            const timezone = dateTimeString.substring(dateTimeString.indexOf("(") - 1);
            return timezone;
        }

        function savePublishDateTime() {
            var dateTimeValue = $('#tbPublished').val();

            if ($("#Published").val() !== dateTimeValue) {
                $("#pendingChangesBadge").show();
            }

            // Note, this saves the date/time using local time (of the user's computer).
            // The server stores this as UTC time.
            if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
                //var datetime = new Date(dateTimeValue);
                //var utcString = datetime.toUTCString();
                $("#Published").val(dateTimeValue);
                $("#btnPublish").html("Published");
                $("#tbPublished").removeClass("is-invalid");
                $("#btnPublishNow").hide();
                $("#btnDraftNow").show();
            } else {
                $("#tbPublished").addClass("is-invalid");
                $("#btnPublishNow").show();
                $("#btnDraftNow").hide();
                $("#btnPublish").html("DRAFT");
                $("#Published").val("");
            }
        }

        function btnChangeTitle() {
            return false;
        }

        function validatePermissions() {
            const publishedValue = $('#tbPublished').val();
            if (typeof (publishedValue) !== "undefined" && publishedValue !== "" && requiresAuthentication && hasPermissionsSet === false) {
                $('#tbPublished').val("");
                const rolelist = $("#RoleList").val();
                modalCheckPermissions.show();
                return false;
            } else {
                return true;
            }
        }

        function checkForSetPermissions() {
            // Has permissions set?
            if (requiresAuthentication && typeof (hasPermissionsSet) !== "undefined") {
                if (hasPermissionsSet) {
                    $("#btnArticleAccess").removeClass("btn-danger");
                    $("#btnArticleAccess").addClass("btn-success");
                } else {
                    $("#btnArticleAccess").removeClass("btn-success");
                    $("#btnArticleAccess").addClass("btn-danger");
                }
            }
        }

        function checkDisplayLiveEditorButton(field) {
            const element = document.getElementById(field);
            if (typeof element === 'undefined' || element === null) {
                return;
            };
            var content = element.value.toLowerCase();
            const hasContentEditable = content.indexOf("=contenteditable");
            const hasCeid = content.indexOf("data-ccms-ceid=");

            if (hasContentEditable > -1 || hasCeid > -1) {
                $("#btnCcmsHtmlEditor").show();
            } else {
                $("#btnCcmsHtmlEditor").hide();
            }
        }

        function displayLastPublished(datetime) {
            if (datetime !== null && datetime !== "") {
                const date = new Date(datetime);
                $("#lblLastPublished").html(date.toLocaleString());
                $("#divLastPublished").show();
            } else {
                $("#divLastPublished").hide();
            }
        }

        $(document).ready(function () {

            displayLastPublished(lastPublished);

            // Sets the color of the permissions button to
            // success for permissions exist, or danger for not.
            checkForSetPermissions();

            if (isAuthor) {
                $("#tbPublished").prop("disabled", true);
            }

            if ($("#Published").val() === null || $("#Published").val() === "") {
                //$("#tbPublished").addClass("is-invalid");
                $("#btnPublishNow").show();
                $("#btnDraftNow").hide();
            } else {
                $("#btnPublishNow").hide();
                $("#btnDraftNow").show();
            }

            $("#swAutoSave").click(function () {
                if ($("#swAutoSave").is(":checked")) {
                    $("#lblAutoSave").html("Autosave (on)");
                    autoSaveOn = true;
                } else {
                    $("#lblAutoSave").html("Autosave (off)");
                    autoSaveOn = false;
                }
            });

            $("#divTitleGroup").click(function () {
                $("#newTitleValidation").html("");
                $("#newTitleValidation").hide();
                $("#newTitle").val("");
                $("#currentTitle").html($("#Title").val());
                autoSaveOn = false;
                modalChangeTitle.show();
            });

            $("#btnCancelChgTitle").click(function (e) {
                autoSaveOn = true;
            });

            $("#frmChangeTitle").submit(function (e) {
                e.preventDefault();
                let urlPath = $("#UrlPath").val();
                let title = $("#newTitle").val();

                // Check to see if this is root or home page and check title
                if (urlPath === "root" && title.includes("/")) {
                    $("#newTitleValidation").html('The home page cannot contain the character "/" in the title.');
                    $("#newTitleValidation").show();
                    return;
                }

                let articleNumber = $("#ArticleNumber").val();
                let data = {
                    "articleNumber": articleNumber,
                    "title": title
                };

                $("#newTitleValidation").html("");
                $("#divTitle").html(title);
                $("#Title").val(title);
                modalChangeTitle.hide();
                saveChanges();
                autoSaveOn = true;
            });

            // COMBOBOX
            $("#combobox").combobox({
                source: function (request, response) {
                    $("#btnOpen").prop('disabled', true);
                    $("#pageStatus").hide();
                    $("#divLinkDetails").hide();
                    $("#btnApplyLink").prop('disabled', true);
                    $("#btnCreatePage").hide();
                    if (comboBoxTimeout !== null) {
                        clearTimeout(comboBoxTimeout);
                    }
                    $.ajax({
                        url: "@Url.Action("GetArticleList", "Editor")",
                        dataType: "json",
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            var results = [];
                            if (data.length === 0) {
                                comboBoxTimeout = setTimeout(function () {
                                    $("#btnCreatePage").show();
                                    const url = "@Url.Action("Create", "Editor")?title=" + $("#combobox").val();
                                    $("#btnCreatePage").attr("href", url);
                                }, 1500);
                            }
                            $.each(data, function (index, entity) {
                                var item = { label: entity.Title, value: entity.Title, url: entity.UrlPath, updated: entity.Updated, id: entity.ArticleNumber, published: entity.LastPublished };
                                results.push(item);
                            });
                            response(results);
                        }
                    });
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {

                    if (ui.item.published === null || ui.item.published === "") {
                        $("#pageStatus").html("Status: - DRAFT - ");
                        $("#tbPublished").addClass("is-invalid");
                        $("#btnPublishNow").show();
                        $("#btnDraftNow").hide();
                    } else {
                        const date = new Date(ui.item.published);
                        $("#pageStatus").html("Publihed: " + date.toUTCString());
                        $("#tbPublished").removeClass("is-invalid");
                        $("#btnPublishNow").hide();
                        $("#btnDraftNow").show();
                    }

                    var titleArray = ui.item.label.split('/');

                    $("#inputLinkText").val(titleArray[titleArray.length - 1]);

                    $("#pageStatus").show();
                    $("#divLinkDetails").show();
                    $("#btnOpenLink").attr("href", "@Url.Action("Versions", "Editor")/" + ui.item.id);
                    $("#btnApplyLink").prop('disabled', false);
                    selectedAnchorData = ui.item; // Save this as the last selected item
                    return true;
                }
            });

            $("#btnRefreshList").click(function (e) {
                e.preventDefault();
                const value = $("#combobox").val();
                $("#combobox").autocomplete("search", value);
            });

            $("#btnOpenLink").click(function (e) {
                if (openPickPageModal) {
                    openPickPageModal();
                }
                else {
                    alert("Could not find openPickPageModal().");
                }
            });

            $("#btnApplyLink").click(function () {
                if (insertPageLink) {
                    insertPageLink();
                } else {
                    alert("insertPageLink() not found.");
                    openSelectFileModal();
                }
            });

            $("#inputLinkText").focus(function () {
                clearFileMgrPaths();
                $("#inputLinkTextError").hide();
            });

            $("#iframeSelectFile").on("load", function () {
                //clearFileMgrPaths();
                $("#spinFileMgrLoading").hide();
            });

            $("#btnClear").click(function () {
                // 'next' is the function that needs to be executed after close.
                let iframe = document.getElementById("iframeSelectFile");
                let iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
                iframeWin.clearSelection();
            });

            $("#btnSelectFileAndClose").click(function () {
                // 'next' is the function that needs to be executed after close.
                let iframe = document.getElementById("iframeSelectFile");
                let iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
                let p = iframeWin.paths;

                if (typeof iframeWin.paths === "undefined" || iframeWin.paths === null || iframeWin.paths.length < 1) {
                    alert("Please select a file.");
                }

                if (selectFileMode === "file") {
                    insertFileLink(p[0]);
                } else if (selectFileMode === "image") {
                    const url = $("#BannerImage").val();
                    if (url === null || url === "") {
                        $("#BannerImage").val(p[0]);
                    }
                    insertImage(p[0]); // Text or code editor inserts image
                } else if (selectFileMode === "bannerimage") {
                    let imgRoot = "@options.BlobPublicUrl.TrimEnd('/')";
                    $("#BannerImage").val(imgRoot + "/" + p[0]);
                }

                saveChanges();
                checkBannerImage();
                return true;
            });

            $("#btnOpenBannerImage").click(function () {
                openSelectFileModal("bannerimage");
            });

            $("#btnClearBannerImage").click(function () {
                $("#BannerImage").val("");
                saveChanges();
                checkBannerImage();
            });

            checkBannerImage();
        });

        function closeDropDowns() {
            $("#btnSave").removeClass("show");
            $("#ddSave").removeClass("show");
            $("#btnInsert").removeClass("show");
            $("#ddInsert").removeClass("show");
        }

        // Displays a 3 second message in a bootstrap toast.
        function toastMsg(message) {

        }

        function saving() {
            //var toast = new bootstrap.Toast(document.getElementById('liveToast'));
            //$("#liveToastMsg").html("Saving... <img height='36' src='/images/az-busy.gif' >");
            //toast.show();
            showSaving();
        }

        function doneSaving() {
            showSaved();
        }

        function clearFileMgrPaths() {
            let iframe = document.getElementById("iframeSelectFile");
            let iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
            if (iframeWin.clearPaths !== "undefined" && iframeWin.clearPaths !== null) {
                iframeWin.clearPaths();
            }
            //iframeWin.reloadPaths();
        }

        function checkBannerImage() {
            $("#btnOpenBannerImage").removeClass("btn-secondary");
            $("#btnOpenBannerImage").removeClass("btn-success");

            const url = $("#BannerImage").val();
            if (url !== null && url !== "") {
                $("#btnOpenBannerImage").addClass("btn-success");
                $("#btnOpenBannerImage").attr("title", "Changes the preview image for this page.")
                $("#btnClearBannerImage").show();
            } else {
                $("#btnOpenBannerImage").addClass("btn-secondary");
                $("#btnOpenBannerImage").attr("title", "Sets the preview image for this page.")
                $("#btnClearBannerImage").hide();
            }
        }

        let cdnTimer = null;
        let cdnMsgTimeout;

        function setCdnResults(cdnResults) {
            if ( typeof cdnResults !== "undefined"
                && cdnResults !== null
                && cdnResults.length > 0
                && cdnResults[0].EstimatedFlushDateTime) {
                    if (cdnMsgTimeout) {
                        clearTimeout(cdnMsgTimeout);
                    }
                    $("#cdnMsg").show();
                    const dateTime = new Date(cdnResults[0].EstimatedFlushDateTime);
                    $("#cdnMsg").html("CDN refresh: " + dateTime.toLocaleString());
                    cdnMsgTimeout = setTimeout(() => {
                        $("#cdnMsg").html("");
                        $("#cdnMsg").hide();
                    }, 120000);
            }
        }
    </script>

    @await RenderSectionAsync("Scripts", false)
</body>
</html>
